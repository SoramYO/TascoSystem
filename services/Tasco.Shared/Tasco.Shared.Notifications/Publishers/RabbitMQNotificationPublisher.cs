using Newtonsoft.Json;
using RabbitMQ.Client;
using System.Text;
using Tasco.Shared.Notifications.Interfaces;
using Tasco.Shared.Notifications.Models;

namespace Tasco.Shared.Notifications.Publishers
{
    public class RabbitMQNotificationPublisher : INotificationPublisher, IDisposable
    {
        private readonly IConnection _connection;
        private readonly IChannel _channel; // S·ª≠ d·ª•ng IChannel cho c√°c ph∆∞∆°ng th·ª©c b·∫•t ƒë·ªìng b·ªô
        private const string QueueName = "notification_queue"; // T√™n queue c·ªë ƒë·ªãnh

        public RabbitMQNotificationPublisher()
        {
            // üîß C·∫•u h√¨nh k·∫øt n·ªëi RabbitMQ
            var factory = new ConnectionFactory()
            {
                HostName = "localhost",
                Port = 5673,
                UserName = "admin",
                Password = "admin123",
                VirtualHost = "/",
                RequestedHeartbeat = TimeSpan.FromSeconds(60),
                NetworkRecoveryInterval = TimeSpan.FromSeconds(10),
                AutomaticRecoveryEnabled = true
            };

            // üîÑ Th·ª±c hi·ªán k·∫øt n·ªëi v√† t·∫°o k√™nh v·ªõi logic retry
            // G·ªçi c√°c ph∆∞∆°ng th·ª©c b·∫•t ƒë·ªìng b·ªô v√† ch·∫∑n lu·ªìng b·∫±ng .Result trong constructor
            // (Nh∆∞ ƒë√£ th·∫£o lu·∫≠n, trong ·ª©ng d·ª•ng th·ª±c t·∫ø, c√¢n nh·∫Øc m·ªôt ph∆∞∆°ng th·ª©c kh·ªüi t·∫°o Async ri√™ng ho·∫∑c DI)
            _connection = ConnectRabbitMQWithRetries(factory).Result;
            _channel = _connection.CreateChannelAsync().Result; // S·ª≠ d·ª•ng CreateChannelAsync().Result

            // Khai b√°o queue b·∫•t ƒë·ªìng b·ªô
            _channel.QueueDeclareAsync(queue: QueueName,
                                     durable: true,
                                     exclusive: false,
                                     autoDelete: false,
                                     arguments: null).Wait(); // Ch·∫∑n ƒë·ªÉ ƒë·∫£m b·∫£o queue ƒë∆∞·ª£c khai b√°o tr∆∞·ªõc khi ti·∫øp t·ª•c

            Console.WriteLine($"‚úÖ Connected to RabbitMQ and queue '{QueueName}' declared successfully.");
        }

        private async Task<IConnection> ConnectRabbitMQWithRetries(ConnectionFactory factory)
        {
            const int maxRetries = 5;
            for (int attempt = 1; attempt <= maxRetries; attempt++)
            {
                try
                {
                    Console.WriteLine($"üîÑ Attempt {attempt}/{maxRetries}: Connecting to RabbitMQ...");
                    Console.WriteLine($"   Host: {factory.HostName}:{factory.Port}");
                    Console.WriteLine($"   User: {factory.UserName}");

                    var connection = await factory.CreateConnectionAsync();
                    Console.WriteLine("‚úÖ Connected to RabbitMQ successfully!");
                    return connection;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå Attempt {attempt} failed: {ex.Message}");
                    if (attempt == maxRetries)
                    {
                        Console.WriteLine("\nüí° Troubleshooting suggestions:");
                        Console.WriteLine("1. Make sure Docker containers are running: `docker-compose ps`");
                        Console.WriteLine("2. Check RabbitMQ container logs: `docker-compose logs rabbitmq`");
                        Console.WriteLine("3. Verify RabbitMQ Management UI: http://localhost:15672 (admin/admin123)");
                        Console.WriteLine("4. Check if notification-service is consuming: `docker-compose logs notification-service`");
                        throw new Exception("Failed to connect to RabbitMQ after multiple retries.", ex);
                    }
                    Console.WriteLine($"‚è≥ Waiting 3 seconds before retry...\n");
                    await Task.Delay(3000);
                }
            }
            return null; // S·∫Ω kh√¥ng bao gi·ªù ƒë·∫°t ƒë∆∞·ª£c do throw exception
        }

        public async Task<bool> PublishAsync(NotificationMessage notification, CancellationToken cancellationToken = default)
        {
            try
            {
                cancellationToken.ThrowIfCancellationRequested(); // Ki·ªÉm tra y√™u c·∫ßu h·ªßy b·ªè

                var json = JsonConvert.SerializeObject(notification, Formatting.Indented);
                var body = Encoding.UTF8.GetBytes(json);

                // Kh·ªüi t·∫°o BasicProperties tr·ª±c ti·∫øp nh∆∞ trong code m·∫´u c·ªßa b·∫°n
                // ƒêi·ªÅu n√†y gi·∫£i quy·∫øt c·∫£ 2 l·ªói b·∫°n ƒë√£ g·∫∑p
                var properties = new BasicProperties
                {
                    Persistent = true, // Tin nh·∫Øn s·∫Ω kh√¥ng b·ªã m·∫•t khi RabbitMQ restart
                    MessageId = notification.Id,
                    Timestamp = new AmqpTimestamp(DateTimeOffset.UtcNow.ToUnixTimeSeconds()),
                    ContentType = "application/json"
                };

                // S·ª≠ d·ª•ng BasicPublishAsync v·ªõi ƒë·ªëi t∆∞·ª£ng BasicProperties ƒë√£ kh·ªüi t·∫°o
                await _channel.BasicPublishAsync(
                    exchange: "", // Exchange m·∫∑c ƒë·ªãnh
                    routingKey: QueueName,
                    mandatory: false,
                    basicProperties: properties, // Truy·ªÅn ƒë·ªëi t∆∞·ª£ng BasicProperties
                    body: body);

                Console.WriteLine($"‚úÖ Message sent: {notification.Type}");
                Console.WriteLine($"   üìß To: {notification.UserId}");
                Console.WriteLine($"   üè∑Ô∏è  Priority: {notification.Priority}");
                Console.WriteLine($"   üìù Title: {notification.Title}");
                Console.WriteLine("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
                return true;
            }
            catch (OperationCanceledException)
            {
                Console.WriteLine($"‚ùå Publish cancelled for message ID: {notification.Id}");
                return false;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Failed to send message (ID: {notification.Id}): {ex.Message}");
                return false;
            }
        }

        public async Task<bool> PublishBatchAsync(IEnumerable<NotificationMessage> notifications, CancellationToken cancellationToken = default)
        {
            var success = true;
            foreach (var notification in notifications)
            {
                if (cancellationToken.IsCancellationRequested)
                {
                    Console.WriteLine("‚ö†Ô∏è Batch publish cancelled.");
                    success = false;
                    break;
                }
                var published = await PublishAsync(notification, cancellationToken);
                if (!published)
                {
                    success = false; // ƒê√°nh d·∫•u l√† c√≥ l·ªói n·∫øu m·ªôt tin nh·∫Øn kh√¥ng g·ª≠i ƒë∆∞·ª£c
                }
                // Th√™m ƒë·ªô tr·ªÖ nh·ªè ƒë·ªÉ tr√°nh qu√° t·∫£i RabbitMQ khi g·ª≠i s·ªë l∆∞·ª£ng l·ªõn tin nh·∫Øn li√™n t·ª•c
                await Task.Delay(100, cancellationToken);
            }
            return success;
        }

        public void Dispose()
        {
            // ƒê√≥ng k√™nh v√† k·∫øt n·ªëi RabbitMQ m·ªôt c√°ch an to√†n
            // G·ªçi c√°c ph∆∞∆°ng th·ª©c CloseAsync() v√† ch·∫∑n b·∫±ng .Wait() trong Dispose
            try
            {
                _channel?.CloseAsync().Wait(); // Ch·∫∑n v√† ch·ªù CloseAsync ho√†n th√†nh
                _channel?.Dispose();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è Error closing channel: {ex.Message}");
            }

            try
            {
                _connection?.CloseAsync().Wait(); // Ch·∫∑n v√† ch·ªù CloseAsync ho√†n th√†nh
                _connection?.Dispose();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è Error closing connection: {ex.Message}");
            }

            Console.WriteLine("üóëÔ∏è RabbitMQ connection and channel disposed.");
            GC.SuppressFinalize(this); // NgƒÉn kh√¥ng cho Finalize ƒë∆∞·ª£c g·ªçi
        }
    }
}